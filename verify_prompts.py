#!/usr/bin/env python3
"""
Script para verificar que los prompts est√°n correctamente integrados en los documentos Word.
Este script lee los documentos generados y muestra un resumen de los prompts incluidos.
"""

from docx import Document
import os


def verify_prompts_in_document(docx_path: str):
    """Verifica que los prompts est√©n incluidos en el documento Word."""
    
    if not os.path.exists(docx_path):
        print(f"‚ùå Archivo no encontrado: {docx_path}")
        return False
    
    try:
        doc = Document(docx_path)
        
        # Contar elementos relacionados con prompts
        prompt_headings = 0
        response_headings = 0
        warning_found = False
        
        for paragraph in doc.paragraphs:
            text = paragraph.text.strip()
            
            # Buscar t√≠tulos de prompts
            if "ü§ñ PROMPT LLM:" in text:
                prompt_headings += 1
                
            # Buscar t√≠tulos de respuestas
            if "üìù RESPUESTA DEL LLM:" in text:
                response_headings += 1
                
            # Buscar advertencia de documento de revisi√≥n
            if "DOCUMENTO DE REVISI√ìN" in text:
                warning_found = True
        
        print(f"üìÑ Documento: {os.path.basename(docx_path)}")
        print(f"   ü§ñ Prompts LLM encontrados: {prompt_headings}")
        print(f"   üìù Placeholders de respuesta: {response_headings}")
        print(f"   ‚ö†Ô∏è  Advertencia de revisi√≥n: {'S√≠' if warning_found else 'No'}")
        
        if prompt_headings > 0:
            print(f"   ‚úÖ Documento en modo REVISI√ìN")
        else:
            print(f"   üìã Documento en modo PRODUCCI√ìN")
            
        return prompt_headings > 0
        
    except Exception as e:
        print(f"‚ùå Error leyendo documento: {e}")
        return False


def verify_all_documents():
    """Verifica todos los documentos en la carpeta outputs."""
    
    print("üîç VERIFICACI√ìN DE PROMPTS EN DOCUMENTOS")
    print("=" * 60)
    
    outputs_dir = "outputs"
    if not os.path.exists(outputs_dir):
        print(f"‚ùå Carpeta {outputs_dir} no encontrada")
        return
    
    docx_files = [f for f in os.listdir(outputs_dir) if f.endswith('.docx') and not f.startswith('~$')]
    
    if not docx_files:
        print(f"‚ùå No se encontraron archivos .docx en {outputs_dir}")
        return
    
    print(f"üìÅ Analizando {len(docx_files)} documentos...\n")
    
    revision_docs = 0
    production_docs = 0
    
    for docx_file in sorted(docx_files):
        docx_path = os.path.join(outputs_dir, docx_file)
        is_revision = verify_prompts_in_document(docx_path)
        
        if is_revision:
            revision_docs += 1
        else:
            production_docs += 1
        print()
    
    # Resumen
    print("üìä RESUMEN:")
    print(f"   üìù Documentos en modo REVISI√ìN (con prompts): {revision_docs}")
    print(f"   üìã Documentos en modo PRODUCCI√ìN (sin prompts): {production_docs}")
    
    if revision_docs > 0:
        print(f"\nüí° Los documentos de revisi√≥n contienen:")
        print(f"   ‚Ä¢ Prompts completos de LLM para an√°lisis")
        print(f"   ‚Ä¢ Placeholders donde ir√°n las respuestas")
        print(f"   ‚Ä¢ Advertencia de documento temporal")
        print(f"   ‚Ä¢ Estructura completa para validaci√≥n")


def show_prompt_structure():
    """Muestra la estructura esperada de prompts en un documento."""
    
    print("\nüìã ESTRUCTURA ESPERADA DE PROMPTS POR DOCUMENTO:")
    print("=" * 60)
    
    expected_prompts = [
        "üîç PROMPTS DE TABLAS INDIVIDUALES:",
        "   ‚Ä¢ Preventivos - Order Area",
        "   ‚Ä¢ Preventivos - Plagas Species", 
        "   ‚Ä¢ Preventivos - Total Trend",
        "   ‚Ä¢ Roedores - Station Status",
        "   ‚Ä¢ Roedores - Elimination Trend",
        "   ‚Ä¢ L√°mparas - Status Monthly",
        "   ‚Ä¢ L√°mparas - Status Legend",
        "   ‚Ä¢ L√°mparas - Captures Species",
        "   ‚Ä¢ L√°mparas - Captures Trend",
        "",
        "üìÇ PROMPTS DE RESUMEN POR SECCI√ìN:",
        "   ‚Ä¢ Resumen Ejecutivo - Servicios Preventivos",
        "   ‚Ä¢ Resumen Ejecutivo - Control de Roedores",
        "   ‚Ä¢ Resumen Ejecutivo - Control de Insectos Voladores",
        "",
        "üìë PROMPT DE RESUMEN GENERAL:",
        "   ‚Ä¢ Resumen Ejecutivo Integral",
        "",
        "üìä TOTAL ESPERADO: 13 prompts por documento"
    ]
    
    for line in expected_prompts:
        print(line)


if __name__ == "__main__":
    print("üîç VERIFICADOR DE PROMPTS EN DOCUMENTOS - SERVIPLAGAS")
    print("=" * 70)
    
    # Verificar todos los documentos
    verify_all_documents()
    
    # Mostrar estructura esperada
    show_prompt_structure()
    
    print(f"\nüéØ PR√ìXIMOS PASOS:")
    print(f"   1. Revisa los documentos .docx generados")
    print(f"   2. Verifica que los prompts est√°n en las ubicaciones correctas")
    print(f"   3. Confirma que las tablas de datos est√°n incluidas en cada prompt")
    print(f"   4. Usa estos prompts para enviar al LLM de tu elecci√≥n")
    print(f"   5. Para cambiar a modo producci√≥n: python document_mode_config.py")
