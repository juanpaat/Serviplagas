"""
Script de validaci√≥n para el sistema Hospital San Vicente
Verifica que todos los componentes funcionen correctamente antes de producci√≥n
"""

import os
import yaml
import pandas as pd
from datetime import datetime
import traceback
from typing import Dict, List, Tuple

class HospitalSanVicenteValidator:
    """Valida la integridad y funcionalidad del sistema."""
    
    def __init__(self):
        self.validation_results = {
            'files': [],
            'configuration': [],
            'data_processing': [],
            'report_generation': [],
            'errors': [],
            'warnings': []
        }
    
    def validate_required_files(self) -> bool:
        """Valida que todos los archivos requeridos est√©n presentes."""
        print("üìÅ Validando archivos requeridos...")
        
        required_files = [
            'main.py',
            'system_cleaner.py',
            'config/hospital_san_vicente_template.yaml',
            'config/settings.py',
            'reports/hospital_san_vicente_generator.py',
            'reports/report_builder.py',
            'README_HOSPITAL_SAN_VICENTE.md',
            'requirements.txt'
        ]
        
        all_present = True
        for file_path in required_files:
            if os.path.exists(file_path):
                self.validation_results['files'].append(f"‚úÖ {file_path}")
                print(f"   ‚úÖ {file_path}")
            else:
                self.validation_results['files'].append(f"‚ùå {file_path}")
                self.validation_results['errors'].append(f"Archivo faltante: {file_path}")
                print(f"   ‚ùå FALTANTE: {file_path}")
                all_present = False
        
        return all_present
    
    def validate_template_configuration(self) -> bool:
        """Valida la configuraci√≥n de la plantilla YAML."""
        print("\n‚öôÔ∏è Validando configuraci√≥n de plantilla...")
        
        template_path = 'config/hospital_san_vicente_template.yaml'
        
        try:
            with open(template_path, 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file)
            
            # Validar secciones requeridas
            required_sections = [
                'document_config',
                'sedes',
                'plantillas_texto',
                'grados_infestacion',
                'contenido_fijo',
                'contacto',
                'configuracion_temporal'
            ]
            
            for section in required_sections:
                if section in config:
                    self.validation_results['configuration'].append(f"‚úÖ Secci√≥n '{section}' presente")
                    print(f"   ‚úÖ Secci√≥n '{section}' presente")
                else:
                    self.validation_results['configuration'].append(f"‚ùå Secci√≥n '{section}' faltante")
                    self.validation_results['errors'].append(f"Secci√≥n faltante en plantilla: {section}")
                    print(f"   ‚ùå Secci√≥n '{section}' faltante")
                    return False
            
            # Validar datos de sedes
            if 'sedes' in config:
                for sede in ['Rionegro', 'Medell√≠n']:
                    if sede in config['sedes']:
                        sede_data = config['sedes'][sede]
                        required_fields = ['nombre_completo', 'codigo_sede', 'direccion', 'telefono']
                        
                        for field in required_fields:
                            if field in sede_data:
                                print(f"   ‚úÖ {sede}.{field}: {sede_data[field]}")
                            else:
                                self.validation_results['errors'].append(f"Campo faltante: {sede}.{field}")
                                print(f"   ‚ùå {sede}.{field} faltante")
                                return False
                    else:
                        self.validation_results['errors'].append(f"Sede faltante: {sede}")
                        print(f"   ‚ùå Sede {sede} no configurada")
                        return False
            
            print("   ‚úÖ Configuraci√≥n de plantilla v√°lida")
            return True
            
        except yaml.YAMLError as e:
            self.validation_results['errors'].append(f"Error YAML: {e}")
            print(f"   ‚ùå Error en YAML: {e}")
            return False
        except FileNotFoundError:
            self.validation_results['errors'].append(f"Plantilla no encontrada: {template_path}")
            print(f"   ‚ùå Plantilla no encontrada: {template_path}")
            return False
    
    def validate_data_loading(self) -> bool:
        """Valida que la carga de datos funcione correctamente."""
        print("\nüìä Validando carga de datos...")
        
        try:
            from data_processing.data_loader import load_data_with_fallback
            from data_processing.data_cleaner import (
                transform_preventivos_df, 
                transform_roedores_df, 
                transform_lamparas_df
            )
            from config.settings import LOCAL_FILES, API_URLS
            
            # Intentar cargar datos
            for data_type in ['preventivos', 'roedores', 'lamparas']:
                try:
                    print(f"   üîÑ Cargando {data_type}...")
                    raw_data = load_data_with_fallback(
                        LOCAL_FILES[data_type], 
                        API_URLS[data_type]
                    )
                    
                    if raw_data is not None and not raw_data.empty:
                        print(f"   ‚úÖ {data_type}: {len(raw_data)} registros cargados")
                        self.validation_results['data_processing'].append(
                            f"‚úÖ {data_type}: {len(raw_data)} registros"
                        )
                        
                        # Intentar transformaci√≥n
                        if data_type == 'preventivos':
                            transformed = transform_preventivos_df(raw_data)
                        elif data_type == 'roedores':
                            transformed = transform_roedores_df(raw_data)
                        else:
                            transformed = transform_lamparas_df(raw_data)
                        
                        if transformed is not None and not transformed.empty:
                            print(f"   ‚úÖ {data_type} transformado: {len(transformed)} registros")
                        else:
                            print(f"   ‚ö†Ô∏è  {data_type} transformado pero vac√≠o")
                            self.validation_results['warnings'].append(f"{data_type} sin datos despu√©s de transformaci√≥n")
                    else:
                        print(f"   ‚ö†Ô∏è  {data_type}: Sin datos disponibles")
                        self.validation_results['warnings'].append(f"{data_type}: Sin datos disponibles")
                        
                except Exception as e:
                    print(f"   ‚ùå Error cargando {data_type}: {e}")
                    self.validation_results['errors'].append(f"Error carga {data_type}: {e}")
                    return False
            
            return True
            
        except ImportError as e:
            self.validation_results['errors'].append(f"Error importaci√≥n m√≥dulos: {e}")
            print(f"   ‚ùå Error importando m√≥dulos: {e}")
            return False
    
    def validate_report_generation(self) -> bool:
        """Valida que la generaci√≥n de reportes funcione."""
        print("\nüìÑ Validando generaci√≥n de reportes...")
        
        try:
            from reports.hospital_san_vicente_generator import HospitalSanVicenteReportGenerator
            
            # Crear generador
            generator = HospitalSanVicenteReportGenerator()
            print("   ‚úÖ Generador instanciado correctamente")
            
            # Crear datos de prueba
            test_data_preventivo = pd.DataFrame({
                'Sede': ['Rionegro', 'Medell√≠n'] * 5,
                'Fecha': [datetime.now()] * 10,
                'Cucarachas Alemanas': [0, 1, 0, 2, 0, 0, 1, 0, 0, 0],
                'Moscas': [0, 0, 1, 0, 0, 0, 0, 1, 0, 0]
            })
            
            test_data_roedores = pd.DataFrame({
                'Sede': ['Rionegro', 'Medell√≠n'] * 3,
                'Estacion': ['E1', 'E2', 'E3', 'E4', 'E5', 'E6'],
                'Consumo': [0, 5, 0, 10, 0, 2]
            })
            
            test_data_lamparas = pd.DataFrame({
                'Sede': ['Rionegro', 'Medell√≠n'] * 2,
                'Lampara': ['L1', 'L2', 'L3', 'L4'],
                'Estado': ['Funcional', 'Saturada', 'Funcional', 'Da√±ada'],
                'Capturas': [10, 25, 8, 0]
            })
            
            print("   ‚úÖ Datos de prueba creados")
            
            # Validar c√°lculo de variables din√°micas
            for sede in ['Rionegro', 'Medell√≠n']:
                try:
                    variables = generator.calculate_dynamic_variables(
                        test_data_preventivo, test_data_roedores, test_data_lamparas, sede
                    )
                    
                    required_vars = [
                        'fecha_elaboracion', 'mes_nombre', 'a√±o', 'sede',
                        'ordenes_solicitadas', 'porcentaje_cumplimiento',
                        'grado_infestacion'
                    ]
                    
                    for var in required_vars:
                        if var in variables:
                            print(f"   ‚úÖ {sede}.{var}: {variables[var]}")
                        else:
                            print(f"   ‚ùå {sede}.{var}: Faltante")
                            return False
                    
                    self.validation_results['report_generation'].append(
                        f"‚úÖ Variables din√°micas {sede}: {len(variables)} calculadas"
                    )
                    
                except Exception as e:
                    print(f"   ‚ùå Error calculando variables para {sede}: {e}")
                    self.validation_results['errors'].append(f"Error variables {sede}: {e}")
                    return False
            
            print("   ‚úÖ Generaci√≥n de reportes validada")
            return True
            
        except ImportError as e:
            self.validation_results['errors'].append(f"Error importaci√≥n generador: {e}")
            print(f"   ‚ùå Error importando generador: {e}")
            return False
        except Exception as e:
            self.validation_results['errors'].append(f"Error validaci√≥n reportes: {e}")
            print(f"   ‚ùå Error en validaci√≥n: {e}")
            return False
    
    def validate_system_cleaner(self) -> bool:
        """Valida que el sistema de limpieza funcione."""
        print("\nüßπ Validando sistema de limpieza...")
        
        try:
            from system_cleaner import ServiplaGasSystemCleaner
            
            cleaner = ServiplaGasSystemCleaner()
            print("   ‚úÖ Sistema de limpieza instanciado")
            
            # Validar identificaci√≥n de archivos (sin eliminar)
            files_to_clean = cleaner.identify_cleanup_files()
            print(f"   ‚úÖ Archivos identificados para limpieza: {len(files_to_clean)}")
            
            # Mostrar algunos archivos candidatos
            for i, file_path in enumerate(files_to_clean[:5]):
                if os.path.exists(file_path):
                    print(f"   üìÑ Candidato: {file_path}")
            
            return True
            
        except ImportError as e:
            self.validation_results['errors'].append(f"Error importaci√≥n limpiador: {e}")
            print(f"   ‚ùå Error importando limpiador: {e}")
            return False
        except Exception as e:
            self.validation_results['errors'].append(f"Error validaci√≥n limpieza: {e}")
            print(f"   ‚ùå Error en validaci√≥n limpieza: {e}")
            return False
    
    def run_complete_validation(self) -> Dict:
        """Ejecuta validaci√≥n completa del sistema."""
        print("üîç VALIDACI√ìN COMPLETA DEL SISTEMA HOSPITAL SAN VICENTE")
        print("=" * 60)
        
        validation_steps = [
            ("Archivos Requeridos", self.validate_required_files),
            ("Configuraci√≥n Plantilla", self.validate_template_configuration),
            ("Carga de Datos", self.validate_data_loading),
            ("Generaci√≥n Reportes", self.validate_report_generation),
            ("Sistema Limpieza", self.validate_system_cleaner)
        ]
        
        all_passed = True
        for step_name, validation_func in validation_steps:
            try:
                result = validation_func()
                if not result:
                    all_passed = False
                    print(f"\n‚ùå FALL√ì: {step_name}")
                else:
                    print(f"\n‚úÖ EXITOSO: {step_name}")
            except Exception as e:
                all_passed = False
                error_msg = f"Error en {step_name}: {e}"
                self.validation_results['errors'].append(error_msg)
                print(f"\nüí• EXCEPCI√ìN en {step_name}: {e}")
                print(f"Traceback: {traceback.format_exc()}")
        
        # Generar reporte final
        self._generate_validation_report(all_passed)
        
        return {
            'success': all_passed,
            'results': self.validation_results,
            'summary': self._get_validation_summary()
        }
    
    def _generate_validation_report(self, success: bool):
        """Genera reporte de validaci√≥n."""
        print(f"\n" + "=" * 60)
        if success:
            print("üéâ VALIDACI√ìN COMPLETADA EXITOSAMENTE")
            print("‚úÖ Sistema listo para producci√≥n")
        else:
            print("‚ùå VALIDACI√ìN FALL√ì")
            print("‚ö†Ô∏è  Se requieren correcciones antes de producci√≥n")
        
        print("=" * 60)
        
        # Mostrar resumen
        print(f"\nüìä RESUMEN:")
        print(f"   ‚úÖ Validaciones exitosas: {self._count_successes()}")
        print(f"   ‚ùå Errores encontrados: {len(self.validation_results['errors'])}")
        print(f"   ‚ö†Ô∏è  Advertencias: {len(self.validation_results['warnings'])}")
        
        # Mostrar errores si los hay
        if self.validation_results['errors']:
            print(f"\n‚ùå ERRORES DETECTADOS:")
            for error in self.validation_results['errors']:
                print(f"   ‚Ä¢ {error}")
        
        # Mostrar advertencias si las hay
        if self.validation_results['warnings']:
            print(f"\n‚ö†Ô∏è  ADVERTENCIAS:")
            for warning in self.validation_results['warnings']:
                print(f"   ‚Ä¢ {warning}")
    
    def _count_successes(self) -> int:
        """Cuenta validaciones exitosas."""
        total = 0
        for category in ['files', 'configuration', 'data_processing', 'report_generation']:
            total += len([item for item in self.validation_results[category] if item.startswith('‚úÖ')])
        return total
    
    def _get_validation_summary(self) -> Dict:
        """Obtiene resumen de validaci√≥n."""
        return {
            'successes': self._count_successes(),
            'errors': len(self.validation_results['errors']),
            'warnings': len(self.validation_results['warnings']),
            'timestamp': datetime.now().isoformat()
        }


def run_system_validation():
    """Ejecuta validaci√≥n completa del sistema."""
    validator = HospitalSanVicenteValidator()
    return validator.run_complete_validation()


if __name__ == "__main__":
    # Ejecutar validaci√≥n completa
    results = run_system_validation()
    
    if results['success']:
        print(f"\nüöÄ SISTEMA VALIDADO - LISTO PARA EJECUTAR:")
        print(f"   python main.py")
        exit(0)
    else:
        print(f"\nüõë SISTEMA REQUIERE CORRECCIONES")
        print(f"   Revisa los errores mostrados arriba")
        exit(1)
